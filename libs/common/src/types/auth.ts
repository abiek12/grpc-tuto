// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.19.6
// source: proto/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";

export const protobufPackage = "auth";

export interface PaginationDto {
  /** Page number for pagination */
  page: number;
  /** Number of items per page */
  limit: number;
}

export interface CreateUserDto {
  username: string;
  email: string;
  password: string;
  /** e.g., "admin", "user", etc. */
  role: string;
  age: number;
}

export interface UserIdDto {
  /** User ID to identify the user */
  id: string;
}

export interface UserUpdateDto {
  /** User ID to identify the user */
  id: string;
  username: string;
  email: string;
  password: string;
  /** e.g., "admin", "user", etc. */
  role: string;
  age: number;
  /** Indicates if the user account is active */
  isActive: boolean;
  /** Optional social media links */
  socialMedia: SocialMedia | undefined;
}

export interface CreateUserResponse {
  user:
    | User
    | undefined;
  /** e.g., "User created successfully" */
  message: string;
}

export interface Empty {
}

export interface GetAllUsersResponse {
  /** List of all users */
  users: User[];
  /** e.g., "Users retrieved successfully" */
  message: string;
}

export interface User {
  id: string;
  username: string;
  email: string;
  password: string;
  /** e.g., "admin", "user", etc. */
  role: string;
  age: number;
  /** Indicates if the user account is active */
  isActive: boolean;
  /** Optional social media links */
  socialMedia: SocialMedia | undefined;
}

export interface SocialMedia {
  facebook?: string | undefined;
  twitter?: string | undefined;
  instagram?: string | undefined;
  linkedin?: string | undefined;
  github?: string | undefined;
}

function createBasePaginationDto(): PaginationDto {
  return { page: 0, limit: 0 };
}

export const PaginationDto: MessageFns<PaginationDto> = {
  encode(message: PaginationDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginationDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginationDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginationDto {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: PaginationDto): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginationDto>, I>>(base?: I): PaginationDto {
    return PaginationDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginationDto>, I>>(object: I): PaginationDto {
    const message = createBasePaginationDto();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseCreateUserDto(): CreateUserDto {
  return { username: "", email: "", password: "", role: "", age: 0 };
}

export const CreateUserDto: MessageFns<CreateUserDto> = {
  encode(message: CreateUserDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    if (message.age !== 0) {
      writer.uint32(40).int32(message.age);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserDto {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
    };
  },

  toJSON(message: CreateUserDto): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserDto>, I>>(base?: I): CreateUserDto {
    return CreateUserDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserDto>, I>>(object: I): CreateUserDto {
    const message = createBaseCreateUserDto();
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.role = object.role ?? "";
    message.age = object.age ?? 0;
    return message;
  },
};

function createBaseUserIdDto(): UserIdDto {
  return { id: "" };
}

export const UserIdDto: MessageFns<UserIdDto> = {
  encode(message: UserIdDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserIdDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserIdDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserIdDto {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UserIdDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserIdDto>, I>>(base?: I): UserIdDto {
    return UserIdDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserIdDto>, I>>(object: I): UserIdDto {
    const message = createBaseUserIdDto();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUserUpdateDto(): UserUpdateDto {
  return { id: "", username: "", email: "", password: "", role: "", age: 0, isActive: false, socialMedia: undefined };
}

export const UserUpdateDto: MessageFns<UserUpdateDto> = {
  encode(message: UserUpdateDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.role !== "") {
      writer.uint32(42).string(message.role);
    }
    if (message.age !== 0) {
      writer.uint32(48).int32(message.age);
    }
    if (message.isActive !== false) {
      writer.uint32(56).bool(message.isActive);
    }
    if (message.socialMedia !== undefined) {
      SocialMedia.encode(message.socialMedia, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserUpdateDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserUpdateDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.socialMedia = SocialMedia.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserUpdateDto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      socialMedia: isSet(object.socialMedia) ? SocialMedia.fromJSON(object.socialMedia) : undefined,
    };
  },

  toJSON(message: UserUpdateDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.socialMedia !== undefined) {
      obj.socialMedia = SocialMedia.toJSON(message.socialMedia);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserUpdateDto>, I>>(base?: I): UserUpdateDto {
    return UserUpdateDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserUpdateDto>, I>>(object: I): UserUpdateDto {
    const message = createBaseUserUpdateDto();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.role = object.role ?? "";
    message.age = object.age ?? 0;
    message.isActive = object.isActive ?? false;
    message.socialMedia = (object.socialMedia !== undefined && object.socialMedia !== null)
      ? SocialMedia.fromPartial(object.socialMedia)
      : undefined;
    return message;
  },
};

function createBaseCreateUserResponse(): CreateUserResponse {
  return { user: undefined, message: "" };
}

export const CreateUserResponse: MessageFns<CreateUserResponse> = {
  encode(message: CreateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserResponse {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: CreateUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserResponse>, I>>(base?: I): CreateUserResponse {
    return CreateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserResponse>, I>>(object: I): CreateUserResponse {
    const message = createBaseCreateUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseGetAllUsersResponse(): GetAllUsersResponse {
  return { users: [], message: "" };
}

export const GetAllUsersResponse: MessageFns<GetAllUsersResponse> = {
  encode(message: GetAllUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: GetAllUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllUsersResponse>, I>>(base?: I): GetAllUsersResponse {
    return GetAllUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllUsersResponse>, I>>(object: I): GetAllUsersResponse {
    const message = createBaseGetAllUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return { id: "", username: "", email: "", password: "", role: "", age: 0, isActive: false, socialMedia: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.role !== "") {
      writer.uint32(42).string(message.role);
    }
    if (message.age !== 0) {
      writer.uint32(48).int32(message.age);
    }
    if (message.isActive !== false) {
      writer.uint32(56).bool(message.isActive);
    }
    if (message.socialMedia !== undefined) {
      SocialMedia.encode(message.socialMedia, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.socialMedia = SocialMedia.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      socialMedia: isSet(object.socialMedia) ? SocialMedia.fromJSON(object.socialMedia) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.socialMedia !== undefined) {
      obj.socialMedia = SocialMedia.toJSON(message.socialMedia);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.role = object.role ?? "";
    message.age = object.age ?? 0;
    message.isActive = object.isActive ?? false;
    message.socialMedia = (object.socialMedia !== undefined && object.socialMedia !== null)
      ? SocialMedia.fromPartial(object.socialMedia)
      : undefined;
    return message;
  },
};

function createBaseSocialMedia(): SocialMedia {
  return { facebook: undefined, twitter: undefined, instagram: undefined, linkedin: undefined, github: undefined };
}

export const SocialMedia: MessageFns<SocialMedia> = {
  encode(message: SocialMedia, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.facebook !== undefined) {
      writer.uint32(10).string(message.facebook);
    }
    if (message.twitter !== undefined) {
      writer.uint32(18).string(message.twitter);
    }
    if (message.instagram !== undefined) {
      writer.uint32(26).string(message.instagram);
    }
    if (message.linkedin !== undefined) {
      writer.uint32(34).string(message.linkedin);
    }
    if (message.github !== undefined) {
      writer.uint32(42).string(message.github);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocialMedia {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocialMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.facebook = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instagram = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.github = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocialMedia {
    return {
      facebook: isSet(object.facebook) ? globalThis.String(object.facebook) : undefined,
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : undefined,
      instagram: isSet(object.instagram) ? globalThis.String(object.instagram) : undefined,
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : undefined,
      github: isSet(object.github) ? globalThis.String(object.github) : undefined,
    };
  },

  toJSON(message: SocialMedia): unknown {
    const obj: any = {};
    if (message.facebook !== undefined) {
      obj.facebook = message.facebook;
    }
    if (message.twitter !== undefined) {
      obj.twitter = message.twitter;
    }
    if (message.instagram !== undefined) {
      obj.instagram = message.instagram;
    }
    if (message.linkedin !== undefined) {
      obj.linkedin = message.linkedin;
    }
    if (message.github !== undefined) {
      obj.github = message.github;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocialMedia>, I>>(base?: I): SocialMedia {
    return SocialMedia.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocialMedia>, I>>(object: I): SocialMedia {
    const message = createBaseSocialMedia();
    message.facebook = object.facebook ?? undefined;
    message.twitter = object.twitter ?? undefined;
    message.instagram = object.instagram ?? undefined;
    message.linkedin = object.linkedin ?? undefined;
    message.github = object.github ?? undefined;
    return message;
  },
};

export interface UsersService {
  CreateUser(request: CreateUserDto): Promise<CreateUserResponse>;
  GetAllUsers(request: Empty): Promise<GetAllUsersResponse>;
  GetUserById(request: UserIdDto): Promise<User>;
  UpdateUser(request: UserUpdateDto): Promise<User>;
  DeleteUser(request: UserIdDto): Promise<Empty>;
  QueryUsers(request: Observable<PaginationDto>): Observable<User>;
}

export const UsersServiceServiceName = "auth.UsersService";
export class UsersServiceClientImpl implements UsersService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UsersServiceServiceName;
    this.rpc = rpc;
    this.CreateUser = this.CreateUser.bind(this);
    this.GetAllUsers = this.GetAllUsers.bind(this);
    this.GetUserById = this.GetUserById.bind(this);
    this.UpdateUser = this.UpdateUser.bind(this);
    this.DeleteUser = this.DeleteUser.bind(this);
    this.QueryUsers = this.QueryUsers.bind(this);
  }
  CreateUser(request: CreateUserDto): Promise<CreateUserResponse> {
    const data = CreateUserDto.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUser", data);
    return promise.then((data) => CreateUserResponse.decode(new BinaryReader(data)));
  }

  GetAllUsers(request: Empty): Promise<GetAllUsersResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAllUsers", data);
    return promise.then((data) => GetAllUsersResponse.decode(new BinaryReader(data)));
  }

  GetUserById(request: UserIdDto): Promise<User> {
    const data = UserIdDto.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserById", data);
    return promise.then((data) => User.decode(new BinaryReader(data)));
  }

  UpdateUser(request: UserUpdateDto): Promise<User> {
    const data = UserUpdateDto.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUser", data);
    return promise.then((data) => User.decode(new BinaryReader(data)));
  }

  DeleteUser(request: UserIdDto): Promise<Empty> {
    const data = UserIdDto.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUser", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  QueryUsers(request: Observable<PaginationDto>): Observable<User> {
    const data = request.pipe(map((request) => PaginationDto.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "QueryUsers", data);
    return result.pipe(map((data) => User.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
